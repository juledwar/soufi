# Copyright (c) 2021 Cisco Systems, Inc. and its affiliates
# All rights reserved.

export ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." >/dev/null 2>&1 && pwd -P)"
export PYTHON=$(which python3.8)
export VENV=${ROOT}/venv-soufi

# Figure out our OS
if [ -f /etc/os-release ]; then
    . /etc/os-release
    export OS_NAME=${ID}
    export OS_VERSION=${VERSION_ID}
else
    UNAME=$(uname)
    if [ "${UNAME}" = 'Darwin' ]; then
        export OS_NAME="${UNAME}"
        export OS_VERSION=$(sw_vers -productVersion | \
                             awk -F. '{printf("%02d%02d", $1, $2)}')
    else
        echo "UNKNOWN OS" 1>&2
        exit 1
    fi
fi

# Get our build vars
if [ -r ${ROOT}/build.vars ]; then
    . ${ROOT}/build.vars
fi

function prep_workspace() {
    # Run any OS specific work-space prep commands
    if [ -f ${ROOT}/.prep ]; then
        return 0
    fi
    local FILES
    local DIR="${ROOT}/build-conf/${OS_NAME}"
    if [ -d ${DIR} ]; then
        FILES=$(LC_ALL=C; echo ${DIR%/}/*)
        for FILE in ${FILES}; do
            [ -d ${FILE} ] && continue
            [ ! -x ${FILE} ] && continue
            ${FILE}
        done
    fi
    touch ${ROOT}/.prep
}

function create_venv() {
    # Check to see if we need to create/recreate the venv.
    if [ -d ${VENV} ]; then
        if [ ${ROOT}/tools/functions -nt ${VENV} ] || \
           [ ${ROOT}/requirements.txt -nt ${VENV} ] || \
           [ ${ROOT}/test-requirements.txt -nt ${VENV} ]; then
            echo "Recreating ${VENV}"
            rm -rf ${VENV}
        else
            # No need to build/rebuild at this time.
            return 0
        fi
    fi

    # Tell virtualenv to build a VENV with the correct version
    # of python provided by functions.
    ${PYTHON} -m venv ${VENV}

    # NOTE(juledwar): Paths longer than 128 characters in a shebang will
    # silently fail. We have a potentially deep directory structure when this
    # runs in Jenkins, so invoke pip directly from the Python interpreter in
    # the virtualenv.
    ${VENV}/bin/python ${VENV}/bin/pip install --upgrade \
        --require-hashes \
        --disable-pip-version-check \
        -r ${REQ_DIR}/requirements-bootstrap.txt

}

function get_package_name() {
    # Can get this from `hatch project metadata` but requires jq to
    # parse, this is easier.
    echo 'soufi'
}

function get_package_version() {
    hatch version
}

function clean_venv() {
    rm -rf ${ROOT}/venv-soufi/
}

function clean_python_dist() {
    rm -rf ${ROOT}/dist/
}

function clean_python_packaging_files() {
    rm -rf ${ROOT}/{AUTHORS,ChangeLog,soufi.egg-info/,.eggs}
}

function clean_python_all() {
    clean_python_dist
    clean_python_packaging_files
}

function clean_tests() {
    rm -rf ${ROOT}/{.hatch/,.tox/,.stestr/,.coverage,cover/}
}

function clean_all() {
    clean_venv
    clean_python_all
    clean_tests
}

function run_hatch() {
    local _ARGS=$@

    # Ensure our venv exists
    create_venv
    echo "Activating"
    . ${VENV}/bin/activate
    echo "Running hatch ${_ARGS}"
    hatch run install
    hatch run ${_ARGS} || exit 1

}

function run_tests() {
    run_hatch ci
}

function run_coverage() {
    run_hatch cover
}

function build_python_package() {
    echo "Checking/creating virtualenv"
    create_venv
    echo "Activating virtualenv"
    . ${VENV}/bin/activate

    # Old python build artifacts can sometimes mess us up, so clean them up
    # before we build our package.
    clean_python_packaging_files

    # Figure out our version
    local VERSION=$(get_package_version)

    # Build the package
    echo "Building Python package"
    hatch build

    # Make what we just built available to other functions.
    local PKG_NAME=$(get_package_name)
    printf "PKG_NAME=${PKG_NAME}\nPKG_VERSION=${VERSION}" \
        > ${ROOT}/dist/build.vars
}


function get_package() {
    . ${ROOT}/dist/build.vars
    echo "${PKG_NAME}:${PKG_VERSION}"
}
